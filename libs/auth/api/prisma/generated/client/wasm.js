/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
	PrismaClientKnownRequestError,
	PrismaClientUnknownRequestError,
	PrismaClientRustPanicError,
	PrismaClientInitializationError,
	PrismaClientValidationError,
	getPrismaClient,
	sqltag,
	empty,
	join,
	raw,
	skip,
	Decimal,
	Debug,
	objectEnumValues,
	makeStrictEnum,
	Extensions,
	warnOnce,
	defineDmmfProperty,
	Public,
	getRuntime,
	createParam,
} = require("./runtime/wasm-engine-edge.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
	client: "6.18.0",
	engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
	DbNull: objectEnumValues.classes.DbNull,
	JsonNull: objectEnumValues.classes.JsonNull,
	AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
	ReadUncommitted: "ReadUncommitted",
	ReadCommitted: "ReadCommitted",
	RepeatableRead: "RepeatableRead",
	Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
	id: "id",
	email: "email",
	emailVerified: "emailVerified",
	name: "name",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
	image: "image",
};

exports.Prisma.SessionScalarFieldEnum = {
	id: "id",
	expiresAt: "expiresAt",
	token: "token",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
	ipAddress: "ipAddress",
	userAgent: "userAgent",
	userId: "userId",
};

exports.Prisma.AccountScalarFieldEnum = {
	id: "id",
	accountId: "accountId",
	providerId: "providerId",
	userId: "userId",
	accessToken: "accessToken",
	refreshToken: "refreshToken",
	idToken: "idToken",
	accessTokenExpiresAt: "accessTokenExpiresAt",
	refreshTokenExpiresAt: "refreshTokenExpiresAt",
	scope: "scope",
	password: "password",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
};

exports.Prisma.VerificationScalarFieldEnum = {
	id: "id",
	identifier: "identifier",
	value: "value",
	expiresAt: "expiresAt",
	createdAt: "createdAt",
	updatedAt: "updatedAt",
};

exports.Prisma.SortOrder = {
	asc: "asc",
	desc: "desc",
};

exports.Prisma.QueryMode = {
	default: "default",
	insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
	first: "first",
	last: "last",
};

exports.Prisma.ModelName = {
	User: "User",
	Session: "Session",
	Account: "Account",
	Verification: "Verification",
};
/**
 * Create the Client
 */
const config = {
	generator: {
		name: "client",
		provider: {
			fromEnvVar: null,
			value: "prisma-client-js",
		},
		output: {
			value:
				"C:\\Users\\bruno\\Documents\\Work\\Projects\\fullstack-starter\\libs\\auth\\api\\prisma\\generated\\client",
			fromEnvVar: null,
		},
		config: {
			engineType: "library",
		},
		binaryTargets: [
			{
				fromEnvVar: null,
				value: "windows",
				native: true,
			},
		],
		previewFeatures: [],
		sourceFilePath:
			"C:\\Users\\bruno\\Documents\\Work\\Projects\\fullstack-starter\\libs\\auth\\api\\prisma\\schema.prisma",
		isCustomOutput: true,
	},
	relativeEnvPaths: {
		rootEnvPath: null,
	},
	relativePath: "../..",
	clientVersion: "6.18.0",
	engineVersion: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
	datasourceNames: ["db"],
	activeProvider: "postgresql",
	postinstall: false,
	inlineDatasources: {
		db: {
			url: {
				fromEnvVar: "DATABASE_URL",
				value: null,
			},
		},
	},
	inlineSchema:
		'// ============================================================================\n// Auth Schema - Better Auth Integration\n// ============================================================================\n// This schema defines authentication models for Better Auth.\n// Applications can import this schema using:\n//   // @prisma-import: @libs/auth/api/prisma/schema.prisma\n//\n// Models:\n// - User: User accounts with email/password authentication\n// - Session: Active user sessions\n// - Account: OAuth/social provider accounts\n// - Verification: Email verification tokens\n// ============================================================================\n\ngenerator client {\n  provider = "prisma-client-js"\n  output   = "./generated/client"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n  schemas  = ["auth"]\n}\n\n// ============================================================================\n// Better Auth Core Schema\n// ============================================================================\n\nmodel User {\n  id            String    @id\n  email         String    @unique\n  emailVerified Boolean   @default(false)\n  name          String?\n  createdAt     DateTime  @default(now())\n  updatedAt     DateTime  @updatedAt\n  image         String?\n  sessions      Session[]\n  accounts      Account[]\n\n  @@map("users")\n  @@schema("auth")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String   @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map("sessions")\n  @@schema("auth")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n\n  @@map("accounts")\n  @@schema("auth")\n}\n\nmodel Verification {\n  id         String   @id\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@map("verifications")\n  @@schema("auth")\n}\n',
	inlineSchemaHash:
		"e29060977dfa48fef4eb8a39b76970b393803f2edc076770ce67f972ce0fdb4c",
	copyEngine: true,
};
config.dirname = "/";

config.runtimeDataModel = JSON.parse(
	'{"models":{"User":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"email","kind":"scalar","type":"String"},{"name":"emailVerified","kind":"scalar","type":"Boolean"},{"name":"name","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"image","kind":"scalar","type":"String"},{"name":"sessions","kind":"object","type":"Session","relationName":"SessionToUser"},{"name":"accounts","kind":"object","type":"Account","relationName":"AccountToUser"}],"dbName":"users"},"Session":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"token","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"},{"name":"ipAddress","kind":"scalar","type":"String"},{"name":"userAgent","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"SessionToUser"}],"dbName":"sessions"},"Account":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"accountId","kind":"scalar","type":"String"},{"name":"providerId","kind":"scalar","type":"String"},{"name":"userId","kind":"scalar","type":"String"},{"name":"user","kind":"object","type":"User","relationName":"AccountToUser"},{"name":"accessToken","kind":"scalar","type":"String"},{"name":"refreshToken","kind":"scalar","type":"String"},{"name":"idToken","kind":"scalar","type":"String"},{"name":"accessTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"refreshTokenExpiresAt","kind":"scalar","type":"DateTime"},{"name":"scope","kind":"scalar","type":"String"},{"name":"password","kind":"scalar","type":"String"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"accounts"},"Verification":{"fields":[{"name":"id","kind":"scalar","type":"String"},{"name":"identifier","kind":"scalar","type":"String"},{"name":"value","kind":"scalar","type":"String"},{"name":"expiresAt","kind":"scalar","type":"DateTime"},{"name":"createdAt","kind":"scalar","type":"DateTime"},{"name":"updatedAt","kind":"scalar","type":"DateTime"}],"dbName":"verifications"}},"enums":{},"types":{}}',
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = {
	getRuntime: async () => require("./query_engine_bg.js"),
	getQueryEngineWasmModule: async () => {
		const loader = (await import("#wasm-engine-loader")).default;
		const engine = (await loader).default;
		return engine;
	},
};
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
	parsed: {
		DATABASE_URL:
			(typeof globalThis !== "undefined" && globalThis.DATABASE_URL) ||
			(typeof process !== "undefined" &&
				process.env &&
				process.env.DATABASE_URL) ||
			undefined,
	},
});

if (
	(typeof globalThis !== "undefined" && globalThis.DEBUG) ||
	(typeof process !== "undefined" && process.env && process.env.DEBUG) ||
	undefined
) {
	Debug.enable(
		(typeof globalThis !== "undefined" && globalThis.DEBUG) ||
			(typeof process !== "undefined" && process.env && process.env.DEBUG) ||
			undefined,
	);
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
