// @prisma-import: ../../test-auth/prisma/schema.prisma
// @prisma-import: ../../test-payments/prisma/schema.prisma
// @prisma-import: ../../test-blog/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "blog", "payments", "public"]
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// ============================================================================
// GENERATED SECTION - DO NOT EDIT MANUALLY
// This section is automatically generated by the Prisma Build Tool
// Generated from:
//   - C:\Users\bruno\Documents\Work\Projects\fullstack-starter\cli\tools\test\fixtures\test-auth\prisma\schema.prisma
//   - C:\Users\bruno\Documents\Work\Projects\fullstack-starter\cli\tools\test\fixtures\test-payments\prisma\schema.prisma
//   - C:\Users\bruno\Documents\Work\Projects\fullstack-starter\cli\tools\test\fixtures\test-blog\prisma\schema.prisma
// Last updated: 2025-10-23T16:07:52.226Z
// ============================================================================

model User {
	id            String    @id @default(cuid())
	email         String    @unique
	emailVerified Boolean   @default(false)
	name          String?
	createdAt     DateTime  @default(now())
	updatedAt     DateTime  @updatedAt
	sessions      Session[]

	@@map("user")
	@@schema("auth")
}

model Session {
	id        String   @id @default(cuid())
	token     String   @unique
	expiresAt DateTime
	userId    String
	user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
	createdAt DateTime @default(now())

	@@map("session")
	@@schema("auth")
}

model Payment {
	id            String        @id @default(cuid())
	amount        Int
	currency      String        @default("USD")
	status        PaymentStatus @default(PENDING)
	customerId    String
	createdAt     DateTime      @default(now())
	updatedAt     DateTime      @updatedAt
	transactions  Transaction[]

	@@map("payment")
	@@schema("payments")
}

model Transaction {
	id          String   @id @default(cuid())
	paymentId   String
	payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
	amount      Int
	description String?
	createdAt   DateTime @default(now())

	@@map("transaction")
	@@schema("payments")
}

enum PaymentStatus {
	PENDING
	COMPLETED
	FAILED
	REFUNDED

	@@schema("payments")
}

model Post {
	id        String    @id @default(cuid())
	title     String
	content   String
	published Boolean   @default(false)
	authorId  String
	createdAt DateTime  @default(now())
	updatedAt DateTime  @updatedAt
	comments  Comment[]

	@@map("post")
	@@schema("blog")
}

model Comment {
	id        String   @id @default(cuid())
	content   String
	postId    String
	post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
	authorId  String
	createdAt DateTime @default(now())

	@@map("comment")
	@@schema("blog")
}

// ============================================================================
// END GENERATED SECTION
// ============================================================================

// ============================================================================

// ============================================================================
// Application Models
// ============================================================================

model Product {
	id          String   @id @default(cuid())
	name        String
	description String?
	price       Int
	createdAt   DateTime @default(now())
	updatedAt   DateTime @updatedAt
	orders      Order[]

	@@map("products")
	@@schema("public")
}

model Order {
	id         String      @id @default(cuid())
	userId     String
	productId  String
	product    Product     @relation(fields: [productId], references: [id])
	quantity   Int
	totalPrice Int
	status     OrderStatus @default(PENDING)
	createdAt  DateTime    @default(now())
	updatedAt  DateTime    @updatedAt

	@@map("orders")
	@@schema("public")
}

enum OrderStatus {
	PENDING
	CONFIRMED
	SHIPPED
	DELIVERED
	CANCELLED

	@@schema("public")
}